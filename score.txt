#include <sourcemod>

#pragma semicolon 1
#pragma newdecls required

// Defina o nome, autor, descrição e versão do plugin
public Plugin myinfo = {
    name        = "score",
    author      = "gudu765",
    description = "Show and reset score",
    version     = "1.0",
    url         = ""
};

public void OnPluginStart()
{
    HookEvent("round_end", Event_RoundEnd);
    RegConsoleCmd("score", PrintRoundInfo, "Show score");
    RegConsoleCmd("resetscore", resetScoreCommand, "Reset score");
}

// Variáveis globais
int g_nCTScoreH1 = 0;
int g_nTScoreH1 = 0;

// Comando para mostrar o placar
public Action PrintRoundInfo(int client, int args)
{
    ReplyToCommand(client, "{\"modname\":\"2\",\"round\":2,\"half\":2,\"CT\":%d,\"TR\":%d}", g_nCTScoreH1, g_nTScoreH1);
    return Plugin_Handled;
}

// Comando para resetar o placar
public Action resetScoreCommand(int client, int args)
{
    if (client != 0) {
        ReplyToCommand(client, "Este comando só pode ser executado no console do servidor.");
        return Plugin_Handled;
    }

    ServerCommand("mp_restartgame 1\n");
    g_nCTScoreH1 = 0;
    g_nTScoreH1 = 0;
    PrintToChatAll("Score resetado");
    return Plugin_Handled;
}



// Gancho de evento chamado quando uma rodada termina
public void Event_RoundEnd(Handle event, const char[] name, bool dontBroadcast)
{
    int rounds = g_nCTScoreH1 + g_nTScoreH1;
    int win_team = GetEventInt(event, "winner");
    if (win_team == 2) // TEAM_T
    {
        if (rounds == 15){
            g_nCTScoreH1++;
        }else{
            g_nTScoreH1++;
        }
        
        PrintToChatAll("TR scores: %d", g_nTScoreH1);
    }
    else if (win_team == 3) // TEAM_CT
    {
        if (rounds == 15){
            g_nTScoreH1++;
        }else{
            g_nCTScoreH1++;
            
        }
        
        PrintToChatAll("CT scores: %d", g_nCTScoreH1);
    }
}
